// KittopiaTech - a Kopernicus Visual Editor

@Kopernicus:NEEDS[!Kopernicus]
{
	Body
	{
		name = Jool
		barycenter = False
		identifier = Squad/Jool
		implements = 
		finalizeOrbit = False
		randomMainMenuBody = False
		contractWeight = 30
		Properties
		{
			description = Jool is particularly known for being a rather large, predominantly green planet. Kerbalkind has longed to visit it since it was first spotted in the sky. Philosophers reason that the swirling green planet must be a really nice place to visit, on account of its wholesome coloration.If you look at Jool through a telescope, it is fuzzy.
			radius = 6000000
			geeASL = 0.800273295870079
			mass = 4.23321273059351E+24
			gravParameter = 282528004209995
			rotates = True
			rotationPeriod = 36000
			tidallyLocked = False
			initialRotation = 0
			inverseRotThresholdAltitude = 220000
			albedo = 0.52
			emissivity = 0.48
			coreTemperatureOffset = 80
			timewarpAltitudeLimits = 0 0 15000 60000 150000 300000 600000 1200000
			sphereOfInfluence = 2455985185.42347
			solarRotationPeriod = False
			navballSwitchRadiusMult = 0.06
			navballSwitchRadiusMultLow = 0.055
			nonExactThreshold = 0.05
			exactSearch = False
			useTheInName = False
			displayName = Jool^N
			selectable = True
			RnDVisibility = Visible
			RnDRotation = False
			maxZoom = 60000
			ScienceValues
			{
				landedDataValue = 30 // Science multiplier for landed science.
				splashedDataValue = 1 // Science multiplier for splashed down science.
				flyingLowDataValue = 12 // Science multiplier for flying low science.
				flyingHighDataValue = 9 // Science multiplier for flying high science.
				inSpaceLowDataValue = 7 // Science multiplier for in space low science.
				inSpaceHighDataValue = 6 // Science multiplier for in space high science.
				recoveryValue = 6
				flyingAltitudeThreshold = 120000 // Altitude when "flying at <body>" transitions from/to "from <body>'s upper atmosphere"
				spaceAltitudeThreshold = 4000000 // Altitude when "in space low" transitions from/to "in space high"
			}
		}
		Orbit
		{
			referenceBody = Sun // The body that this body is orbiting around.
			inclination = 1.30400002002716
			eccentricity = 0.0500000007450581
			semiMajorAxis = 68773560320 // The altitude of the highest point in the orbit
			longitudeOfAscendingNode = 52 // The position of the highest point on the orbit circle
			argumentOfPeriapsis = 0
			meanAnomalyAtEpoch = 0.100000001490116
			meanAnomalyAtEpochD = 5.72957803668559
			epoch = 0
			color = 0.329411775,0.521568656,0.0745098069,0.501960814 // The color of the orbit line in the Tracking Station
			nodeColor = 0.329411775,0.521568656,0.0745098069,0.501960814 // The color of the circle that marks the planets current position on the orbit
			mode = REDRAW_AND_RECALCULATE
			icon = ALL
			cameraSmaRatioBounds = 0.03 25
			period = 104661432.107989
		}
		ScaledVersion
		{
			type = Atmospheric
			fadeStart = 29000
			fadeEnd = 30000
			sphericalModel = False
			deferMesh = False
			invisible = False
			Material
			{
				color = 0.791044772,0.791044772,0.791044772,1
				specColor = 0,0,0,1
				shininess = 1
				texture = BUILTIN/gas1_clouds
				mainTexScale = 1,1
				mainTexOffset = 0,0
				normals = BUILTIN/cloud_normal
				bumpMapScale = 15,8
				bumpMapOffset = 0,0
				opacity = 1
				rimPower = 2.48
				rimBlend = 0.29
				rimColorRamp = BUILTIN/gas1_atmogradiant
				rimColorRampScale = 1,1
				rimColorRampOffset = 0,0
				localLightDirection = -0.85660249,0.143874586,0.495512158,0
				resourceMapScale = 1,1
				resourceMapOffset = 0,0
			}
		}
		Atmosphere
		{
			enabled = True // Whether the body has an atmosphere.
			oxygen = False // Whether the atmosphere contains oxygen.
			staticDensityASL = 6.70262205528434 // Atmospheric density at sea level. Used to calculate the parameters of the atmosphere if no curves are used.
			adiabaticIndex = 1.43
			atmosphereDepth = 200000 // The height of the atmosphere.
			gasMassLapseRate = 2.07657256052129
			atmosphereMolarMass = 0.0022
			pressureCurveIsNormalized = False // Whether the pressure curve should use absolute (0 - atmosphereDepth) or relative (0 - 1) values.
			staticPressureASL = 1519.875 // The static pressure at sea level. Used to calculate the parameters of the atmosphere if no curves are used.
			temperatureCurveIsNormalized = False // Whether the temperature curve should use absolute (0 - atmosphereDepth) or relative (0 - 1) values.
			temperatureLapseRate = 0.001
			temperatureSeaLevel = 200 // The static temperature at sea level. Used to calculate the parameters of the atmosphere if no curves are used.
			ambientColor = 0.0754820928,0.208955199,0.0686121732,1 // All objects inside of the atmosphere will slightly shine in this color.
			lightColor = 0.674509823,0.596078455,0.850980401,0
			addAFG = True
			pressureCurve // Assigns a pressure value to a height value inside of the atmosphere.
			{
				key = 0 5066.25 0 -0.6723968
				key = 10000 1519.875 -0.1346587 -0.1346587
				key = 29000 628.0436 -0.01449255 -0.01449255
				key = 123450 22.26 -0.001562163 -0.001562163
				key = 150000 2 -0.0001361465 -0.0001361465
				key = 170000 0.1 -1.001277E-05 -1.001277E-05
				key = 200000 0 0 0
			}
			temperatureCurve // Assigns a temperature value to a height value inside of the atmosphere.
			{
				key = 0 200 0 -0.001182922
				key = 29000 165 -0.001207278 -0.001207278
				key = 123450 120 0 0
				key = 168000 160 0.0009967944 0.0009967944
				key = 187500 175 0 0
				key = 194000 167 0 0
				key = 200000 350 0.08717471 0
			}
			temperatureSunMultCurve
			{
				key = 0 0 0 0
				key = 29000 0.5 0 0
				key = 123450 0.8 0 0
				key = 200000 1.5 0 0
			}
			temperatureLatitudeBiasCurve
			{
				key = 0 30 0 -0.0957164
				key = 50 10 -0.950278 -0.950278
				key = 70 -20 -1.955704 -1.955704
				key = 90 -40 -0.02418368 0
			}
			temperatureLatitudeSunMultCurve
			{
				key = 0 9 0 0.02746098
				key = 40 12 0.2295445 0.2295445
				key = 65 18 0 0
				key = 90 5 0 0
			}
			temperatureAxialSunBiasCurve
			{
				key = 0 0 0 0
			}
			temperatureAxialSunMultCurve
			{
				key = 0 0 0 0
			}
			temperatureEccentricityBiasCurve
			{
				key = 0 0 0 0
			}
			AtmosphereFromGround // The atmosphere effect that is seen on the horizon.
			{
				DEBUG_alwaysUpdateAll = False // Whether all parameters should get recalculated and reapplied every frame.
				doScale = True // Whether the atmosphere mesh should be scaled automatically.
				innerRadius = 5996250 // The lower bound of the atmosphere effect.
				invWaveLength = 4.83110952,7.92111492,1.90687299,0.5
				outerRadius = 6150000 // The upper bound of the atmosphere effect.
				samples = 4
				transformScale = 1.02499998,1.02499998,1.02499998 // The scale of the atmosphere mesh in all three directions. Automatically set if doScale is enabled.
				waveLength = 0.674509823,0.596078455,0.850980401,0
				outerRadiusMult = 1.025 // A multiplier that automatically sets outerRadius based on the planets radius.
				innerRadiusMult = 0.975 // A multiplier that automatically sets innerRadius based on the planets radius.
			}
		}
		Debug
		{
			exportMesh = True // Whether Kopernicus should save a .bin file with the ScaledSpace mesh.
			update = False // Setting this to true will force Kopernicus to update the ScaledSpace mesh.
			showSOI = False
		}
	}
}
