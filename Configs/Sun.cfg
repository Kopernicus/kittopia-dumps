// KittopiaTech - a Kopernicus Visual Editor

@Kopernicus:NEEDS[!Kopernicus]
{
	Body
	{
		name = Sun
		barycenter = False
		identifier = Squad/Sun
		implements = 
		finalizeOrbit = False
		randomMainMenuBody = False
		contractWeight = 30
		Properties
		{
			description = The Sun is the most well known object in the daytime sky. Scientists have noted a particular burning sensation and potential loss of vision if it is stared at for long periods of time. This is especially important to keep in mind considering the effect shiny objects have on the average Kerbal.
			radius = 261600000
			geeASL = 1.74684656100137
			mass = 1.75654591319326E+28
			gravParameter = 1.17233279483249E+18
			rotates = True
			rotationPeriod = 432000
			tidallyLocked = False
			initialRotation = 0
			inverseRotThresholdAltitude = 600000
			albedo = 0
			emissivity = 0
			coreTemperatureOffset = 0
			timewarpAltitudeLimits = 0 3270000 3270000 6540000 1.308E+07 2.616E+07 5.232E+07 6.54E+07
			sphereOfInfluence = Infinity
			solarRotationPeriod = False
			navballSwitchRadiusMult = 0.06
			navballSwitchRadiusMultLow = 0.055
			nonExactThreshold = 0.05
			exactSearch = False
			useTheInName = True
			displayName = The Sun^N
			selectable = True
			RnDVisibility = Visible
			RnDRotation = True
			maxZoom = 60000
			ScienceValues
			{
				landedDataValue = 1 // Science multiplier for landed science.
				splashedDataValue = 1 // Science multiplier for splashed down science.
				flyingLowDataValue = 1 // Science multiplier for flying low science.
				flyingHighDataValue = 1 // Science multiplier for flying high science.
				inSpaceLowDataValue = 11 // Science multiplier for in space low science.
				inSpaceHighDataValue = 2 // Science multiplier for in space high science.
				recoveryValue = 4
				flyingAltitudeThreshold = 18000 // Altitude when "flying at <body>" transitions from/to "from <body>'s upper atmosphere"
				spaceAltitudeThreshold = 1E+09 // Altitude when "in space low" transitions from/to "in space high"
			}
		}
		ScaledVersion
		{
			type = Star
			fadeStart = 0
			fadeEnd = 0
			sphericalModel = False
			deferMesh = False
			invisible = False
			Light
			{
				sunlightColor = 1,1,1,1 // The color of the LocalSpace starlight. Influences vessels and PQS terrain.
				sunlightShadowStrength = 0.7523364 // The strength of the shadows caused by LocalSpace starlight.
				scaledSunlightColor = 1,1,1,1 // The color of the ScaledSpace starlight. Influences the ScaledSpace representation of the bodies.
				IVASunColor = 1,0.976999998,0.896000028,1 // The color of the starlight in IVA view.
				ambientLightColor = 0.0599999987,0.0599999987,0.0599999987,1 // The color of ambient lighting when orbiting near the star.
				sunLensFlareColor = 1,1,1,1 // The color of the stars LensFlare effect. Gets multiplied with the color of the base texture (yellow-ish for stock flare).
				givesOffLight = True // Whether the star should emit light and have a LensFlare effect.
				sunAU = 13599840256 // TODO
				luminosity = 1360 // TODO
				insolation = 0.15 // TODO
				radiationFactor = 1 // TODO
				brightnessCurve // Associates a distance value with a multiplier for the brightness of the LensFlare effect.
				{
					key = -0.01573471 0.217353 1.706627 1.706627
					key = 5.084181 3.997075 -0.001802375 -0.001802375
					key = 38.56295 1.82142 0.0001713 0.0001713
				}
				IntensityCurve // Associates a distance value (in meters) with a value that describes the intensity of the LocalSpace starlight at that point.
				{
					key = 0 0.9 0 0
					key = 1 0.9 0 0
				}
				ScaledIntensityCurve // Associates a distance value (in meters / 6000) with a value that describes the intensity of the ScaledSpace starlight at that point.
				{
					key = 0 0.9 0 0
					key = 1 0.9 0 0
				}
				IVAIntensityCurve // Associates a distance value (in meters) with a value that describes the intensity of the IVA starlight at that point.
				{
					key = 0 0.8099999 0 0
					key = 1 0.8099999 0 0
				}
			}
			Material
			{
				rampMap = BUILTIN/
				rampMapScale = 1,1
				rampMapOffset = 0,0
				noiseMap = BUILTIN/sunnoisenew
				noiseMapScale = 1,1
				noiseMapOffset = 0,0
				emitColor0 = 1,0.816042185,0.506993055,1
				emitColor1 = 0.925373137,0.773156404,0.287965715,1
				sunspotTex = BUILTIN/sunsurfacenew
				sunspotTexScale = 1,1
				sunspotTexOffset = 0,0
				sunspotPower = 1
				sunspotColor = 0.283582091,0.126710668,0.0208224356,1
				rimColor = 1,0.863375425,0.583916068,1
				rimPower = 1.29
				rimBlend = 2.5
			}
			Coronas
			{
				Value
				{
					scaleSpeed = 0.007
					scaleLimitY = 5
					scaleLimitX = 5
					updateInterval = 5
					speed = -1
					rotation = 0
					Material
					{
						texture = BUILTIN/suncoronanew
						mainTexScale = 1,1
						mainTexOffset = 0,0
						invFade = 2.553731
					}
				}
				Value
				{
					scaleSpeed = 0.009
					scaleLimitY = 5
					scaleLimitX = 5
					updateInterval = 5
					speed = 1
					rotation = 0
					Material
					{
						texture = BUILTIN/suncoronanew
						mainTexScale = 1,1
						mainTexOffset = 0,0
						invFade = 2.553731
					}
				}
			}
		}
		Atmosphere
		{
			enabled = True // Whether the body has an atmosphere.
			oxygen = False // Whether the atmosphere contains oxygen.
			staticDensityASL = 0.00072492861572823 // Atmospheric density at sea level. Used to calculate the parameters of the atmosphere if no curves are used.
			adiabaticIndex = 1.42999994754791
			atmosphereDepth = 600000 // The height of the atmosphere.
			gasMassLapseRate = 0.465695397616382
			atmosphereMolarMass = 0.00219999998807907
			pressureCurveIsNormalized = False // Whether the pressure curve should use absolute (0 - atmosphereDepth) or relative (0 - 1) values.
			staticPressureASL = 16 // The static pressure at sea level. Used to calculate the parameters of the atmosphere if no curves are used.
			temperatureCurveIsNormalized = False // Whether the temperature curve should use absolute (0 - atmosphereDepth) or relative (0 - 1) values.
			temperatureLapseRate = 0.00973333333333333
			temperatureSeaLevel = 5840 // The static temperature at sea level. Used to calculate the parameters of the atmosphere if no curves are used.
			ambientColor = 0,0,0,0 // All objects inside of the atmosphere will slightly shine in this color.
			addAFG = True
			pressureCurve // Assigns a pressure value to a height value inside of the atmosphere.
			{
				key = 0 16 0 0
				key = 5000 8.3 -0.001532 -0.001532
				key = 10000 0.68 -0.001178053 -0.001178053
				key = 10753.09 0.300954 -2.96097E-05 -2.96097E-05
				key = 14194.01 0.2613179 -8.41565E-07 -8.41565E-07
				key = 350000 0.1 -7.49481E-07 -7.49481E-07
				key = 400000 0.04 -7.05211E-07 -7.05211E-07
				key = 590000 2E-05 -6.21053E-09 -6.21053E-09
				key = 600000 0 0 0
			}
			temperatureCurve // Assigns a temperature value to a height value inside of the atmosphere.
			{
				key = 0 5840 0 -0.2780258
				key = 10000 4465 -0.01447884 -0.01447884
				key = 50000 4000 -0.007179292 0.003853968
				key = 250000 5800 0.0009989792 0.0009989792
				key = 500000 6000 0.001352723 0.001352723
				key = 600000 10000 0.06371323 0
			}
			temperatureSunMultCurve
			{
				key = 0 0 0 0
			}
			temperatureLatitudeBiasCurve
			{
				key = 0 0 0 0
			}
			temperatureLatitudeSunMultCurve
			{
				key = 0 0 0 0
			}
			temperatureAxialSunBiasCurve
			{
				key = 0 0 0 0
			}
			temperatureAxialSunMultCurve
			{
				key = 0 0 0 0
			}
			temperatureEccentricityBiasCurve
			{
				key = 0 0 0 0
			}
		}
		Debug
		{
			exportMesh = True // Whether Kopernicus should save a .bin file with the ScaledSpace mesh.
			update = False // Setting this to true will force Kopernicus to update the ScaledSpace mesh.
			showSOI = False
		}
	}
}
